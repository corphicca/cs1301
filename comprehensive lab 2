
/*
Cidayin Nahuat
 [CS1101] Comprehensive Lab 2
 This work is to be done individually. It is not permitted to.
 share, reproduce, or alter any part of this assignment for any
 purpose. Students are not permitted from sharing code, uploading
 this assignment online in any form, or viewing/receiving/
 modifying code written from anyone else. This assignment is part.
 of an academic course at The University of Texas at El Paso and
 a grade will be assigned for the work produced individually by
 the student.
*/
import java.util.Scanner;
import java.util.Random;

public class CL2_Nahuat {
    public class ConsoleColors {
        //different color to display in terminal
        public static final String RESET = "\033[0m";  // Text Reset 
        public static final String BLACK = "\033[0;30m";   // BLACK
        public static final String RED = "\033[0;31m";     // RED
        public static final String GREEN = "\033[0;32m";   // GREEN
        public static final String YELLOW = "\033[0;33m";  // YELLOW
        public static final String BLUE = "\033[0;34m";    // BLUE
        public static final String PURPLE = "\033[0;35m";  // PURPLE
        public static final String CYAN = "\033[0;36m";    // CYAN
        public static final String WHITE = "\033[0;37m";   // WHITE
        public static final String WHITE_BOLD = "\033[1;37m";  // WHITE Bold

    }

    public static void main(String[] args) {

        //creating array named key that has the randomized pairs user will try to figure out which is initialized in method setupBoard 
       int[] key = setupBoard(); 
       //creating array named playingBoard that displays question marks or values that user guesses for guess 1 and guess2 or if a pair is found 
       int[] playingBoard = new int [key.length]; 

       //initialize every index of array playingBoard with element -1 
       for(int i = 0; i < playingBoard.length; i++) 
        playingBoard[i] = -1;

       //sets number of attempts displayed on menu based on size of user input 
       int attempts = (key.length / 2) + 2; 

       //calling method that displays menu with calculated attempts and asks user for limited/ unlimited attempts or exit 
       displayMainMenu(attempts);

       Scanner keyboardScanner = new Scanner(System.in); 
       int userIn = keyboardScanner.nextInt();
       
        //menu is displayed and user has option to choose option 1, option 2, and option 3
        while(userIn < 1 || userIn > 3){

        //reprompt if userIn is out of bounds 
        System.out.println("Invalid input, try again");
        userIn = keyboardScanner.nextInt();
        }
        if (userIn == 2){
            attempts = -1; 
        }

        if (userIn == 3){
            attempts = 0;
            System.out.println("....exiting game"); 
        }

        //initalize new variable gameState with value 0 
        int gameState = 0;

        //While attempts is not equal to 0 enter the while loop 
        while(attempts != 0){

            //if attempts is greater than 0 display number of attempts remaining 
            if(attempts > 0){System.out.println("You have " + ConsoleColors.YELLOW + attempts + ConsoleColors.RESET + " attempts remaining");
            } else {
                System.out.println("You have unlimited attempts remaining");
            }

            // runGame will eithe return 3 if all pairs are found or 0 otherwise 
            gameState = runGame(playingBoard, key);

            //if runGame return 3 that means the game is over and we congratulate the winner 
            if(gameState == 3){
                System.out.println(ConsoleColors.GREEN + "Congratulations, you have won the game!" + ConsoleColors.RESET);
                //initialized attempts to 1 so attemps gets decremented and we leave the while loop 
                attempts = 1;
            } 
            attempts--;

            //attempts and gameState need to equal 0 in order to display "Game Over". Use for when a user runs out of attempts 
            if(attempts == 0 && gameState == 0)
             System.out.print(ConsoleColors.RED + "Game Over" + ConsoleColors.RESET);
        }
        
    }
     /**
     * This method will request the user to select two cells in the board to
     * discover the numbers in them
     * 
     * @param playingBoard
     * @param board
     * @return 3 if all the pairs have been found, 0 otherwise
     */
    private static int runGame(int[] playingBoard, int[] board) {
        //declare two variables cell1 and cell2 that will be initialized with user input 
        int cell1, cell2; 
        Scanner keyboardScanner = new Scanner (System.in);

        
        displayBoard(playingBoard);
        do {
            System.out.println("Enter cell number: ");
            cell1 = keyboardScanner.nextInt(); 
            System.out.println(); 
        } while (!isWithinBounds(playingBoard.length, cell1) || isCellSelected(playingBoard, cell1));
        System.out.println("You have discovered: " + board[cell1] + "\nwhere is the matching pair? ");
        
        clearCell(playingBoard, cell1, board[cell1]); 
        displayBoard(playingBoard); 

        do {
            System.out.println("Enter cell number: "); 
            cell2 = keyboardScanner.nextInt(); 
            System.out.println();
        } while (!isWithinBounds(playingBoard.length, cell2) || isCellSelected(playingBoard, cell2) || cell2 == cell1); 

        clearCell(playingBoard, cell2, board[cell2]); 
        displayBoard(playingBoard); 

        if (board[cell1] == board[cell2]){
            System.out.println("You have found a pair");
        } else {
            System.out.println("You uncovered: " + board[cell2]); 
            clearCell(playingBoard, cell1, -1); 
            clearCell(playingBoard, cell2, -1); 
        }

        if (isBoardCleared(playingBoard)){
            
            return 3;
        }
        return 0; 
    }

    /**
     * Checks if a selected cell is within the bounds of the board
     * 
     * @param boardLength
     * @param cell
     * @return true if the index of the cell is within the bounds of the board
     */
    private static boolean isWithinBounds(int boardLength, int cell) {
        if(cell >= 0 && cell < boardLength){
            return true;
        }
        return false; 
        
    }

    /**
     * This method will ask the user for the size of the board, check that the size
     * is even and request the method "place pairs" to randomly place pairs of numbers
     * 
     * @return An integer array representing a 1D board
     */
    private static int[] setupBoard() {
        Scanner keyboardScanner = new Scanner(System.in); 

        //Prompt user to pick a number for the size of the board. Number needs to be even and not <= 2 
        System.out.println("Welcome to " + ConsoleColors.PURPLE + "Match A Number Game! " + ConsoleColors.RESET); 
        System.out.println("player needs to pick " + ConsoleColors.CYAN + "two cells " + ConsoleColors.RESET + "in hopes of matching it with its " + ConsoleColors.CYAN + "pair" +ConsoleColors.RESET);
        System.out.println("Pick an " + ConsoleColors.RED +  "even number greater than two " + ConsoleColors.RESET + "for the size of the board");
        int size = keyboardScanner.nextInt();

        //int type array named key first initialized as length of 1 
        int[] key = new int [1];  

        //while size is not a even number OR size is less than or equal to 2, prompt user to enter another number 
        while(size % 2 != 0 || size <= 2){ 
            System.out.println("Error, please enter an even number greater than 2 for the size of the board");
            size = keyboardScanner.nextInt(); 
            }
            
        //once we are out of the while loop initialize the size of array key from user input size 
        key = new int[size];  

        //unchanged method placePlairs randomizes every index in array key with random number < than 0 and has a pair 
        placePairs(key); 
        
        //return key array with length from user input size 
        return key;
    }

    /**
     * This method will display the main menu
     * @param attempts
     */
    private static void displayMainMenu(int attempts) {

        //display menu and thats it, do not read input since this method is void 
        System.out.println("Do you wish to play for: ");
        System.out.println("1. "+ ConsoleColors.YELLOW + attempts + ConsoleColors.RESET + " attempts");
        System.out.println("2. Unlimited number of attempts");
        System.out.println("3. Exit");

    }

    /**
     * 
     * This method will display the board. Question marks are pairs to be found
     *   0   1   2   3   4   5
     * _________________________
     * | 2 | 3 | ? | 2 | 3 | ? |
     * 
     * @param board The board to be shown. Question marks are pairs to be found
     * @return nothing
     */
    private static void displayBoard(int[] board) {
        //prints out the indices of the array 
        for(int i = 0; i < board.length; i++){
            System.out.print(i);
            System.out.print(' ');
            System.out.print(' ');
        }

        //prints out certain lengths of boarder based on size of the board 
        System.out.println(' ');
        if (board.length == 10){
           System.out.println(ConsoleColors.WHITE_BOLD + "------------------------------" + ConsoleColors.RESET);
        } else if (board.length == 8) {
           System.out.println(ConsoleColors.WHITE_BOLD + "----------------------" + ConsoleColors.RESET);
        } else if (board.length == 6){
           System.out.println(ConsoleColors.WHITE_BOLD + "----------------" + ConsoleColors.RESET);
        }else if (board.length == 4){
           System.out.println(ConsoleColors.WHITE_BOLD + "----------" + ConsoleColors.RESET);
        }else {
           System.out.println(ConsoleColors.WHITE_BOLD + "--------------------------------------------------"+ ConsoleColors.RESET);
        }

        //prints out new playingBoard that displays question marks 
        for (int i = 0; i < board.length; i++){

            //in the main method we first initialized array playingBoard with value -1 meaning in this for loop, every index that is equal to 
            //-1 will print out a question mark  
            if(board[i] == -1){
                System.out.print('?');   
            } else {
                //else if index at i is not equal to -1 print out the actual element in the array key 
                System.out.print(ConsoleColors.CYAN + board[i] + ConsoleColors.RESET);
            }
            System.out.print(' ');
            System.out.print(' ');
        }
        System.out.println();
    }

    /**
     * This method will return true if the cell to be selected has already been
     * cleared
     * @param board
     * @param cell
     * @return
     */
    private static boolean isCellSelected(int[] board, int cell) { 
        if (board[cell] != -1){
            return true;
        }
        return false; 
    }

    /**
     * This method will set a value into a specific cell
     * @param board
     * @param cell
     * @param value
     */
    private static void clearCell(int[] board, int cell, int value) {
        //method is void, all we need to do is set a specific index a value 
        board[cell] = value; 
    }

    /**
     * This method will return true if the board has been cleared thus the end
     * of the game. False otherwise.
     * @param board
     * @return
     */
    private static boolean isBoardCleared(int[] board) {
        for(int i = 0; i < board.length; i++){
            if(board[i] == -1){
                return false; 
            }
        } 
        return true; 
    }

    /**
     * This method will randomly place pairs of numbers. It is guaranteed that the pairs of numbers will be greater than zero
     * DO NOT MODIFY
     * @param board
     */
    private static void placePairs(int[] board) {
        Random rand = new Random();

        // place the values in the array in order
        for (int i = 0; i < board.length; i++)
            board[i] = i / 2 + 1;
        // perfect array shuffle
        // swap the ith value with a random value from index i to end of array
        for (int i = 0; i < board.length - 1; i++) {
            int j = rand.nextInt(board.length - i);
            int temp = board[i];
            board[i] = board[j];
            board[j] = temp;
        }

    }
}
