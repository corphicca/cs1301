
/*
Cidayin Nahuat
 [CS1101] Comprehensive Lab 2
 This work is to be done individually. It is not permitted to.
 share, reproduce, or alter any part of this assignment for any
 purpose. Students are not permitted from sharing code, uploading
 this assignment online in any form, or viewing/receiving/
 modifying code written from anyone else. This assignment is part.
 of an academic course at The University of Texas at El Paso and
 a grade will be assigned for the work produced individually by
 the student.
*/
import java.util.Scanner;
import java.util.Random;

public class CL2_part2 {
    
    public static void main(String[] args) {

        //creating array named key that has the randomized pairs user will try to figure out which is initialized in method setupBoard 
       int[] key = setupBoard(); 
       //creating playingBoard that displays question marks or values that user guesses for guess 1 and guess2 or 
       int[] playingBoard = new int [key.length]; 

       for(int i = 0; i < playingBoard.length; i++) 
        playingBoard[i] = -1;

       //sets number of attempts displayed on menu based on size of user input 
       int attempts = (key.length / 2) + 2; 
       //calling method that displays menu and ask user for limited/ unlimited attempts or exit 
       displayMainMenu(attempts);

       Scanner keyboardScanner = new Scanner(System.in); 
       int userIn = keyboardScanner.nextInt();
       
       while (userIn < 1 || userIn > 3){
        //reprompt
        System.out.println("Invalid input, try again");
        userIn = keyboardScanner.nextInt();
    }
     if ( userIn == 2){
         attempts = -1;

    } if (userIn == 3){
         attempts = 0;
         System.out.println("....exiting game"); 
    }

       
       int gameState = 0;

        while(attempts != 0){
            if(attempts > 0) System.out.println("You have " + attempts + " attempts remaining");
            else System.out.println("You have unlimited attempts remaining");

            gameState = runGame(playingBoard, key);
            if(gameState == 3){
                System.out.println("Congratulations, you have won the game");
                attempts = 1;
            } 
            attempts--;
            if(attempts == 0 && gameState == 0)
             System.out.print("Game Over");
        }
        
    }
     /**
     * This method will request the user to select two cells in the board to
     * discover the numbers in them
     * 
     * @param playingBoard
     * @param board
     * @return 3 if all the pairs have been found, 0 otherwise
     */
    private static int runGame(int[] playingBoard, int[] board) {
        int cell1, cell2; 
        Scanner keyboardScanner = new Scanner (System.in);

        displayBoard(playingBoard);
        do {
            System.out.println("Enter cell number: ");
            cell1 = keyboardScanner.nextInt(); 
            System.out.println(); 
        } while (!isWithinBounds(playingBoard.length, cell1) || isCellSelected(playingBoard, cell1));
        System.out.println("You have discovered: " + board[cell1] + "\nwhere is the matching pair? ");
        
        clearCell(playingBoard, cell1, board[cell1]); 
        displayBoard(playingBoard); 

        do {
            System.out.println("Enter cell number: "); 
            cell2 = keyboardScanner.nextInt(); 
            System.out.println();
        } while (!isWithinBounds(playingBoard.length, cell2) || isCellSelected(playingBoard, cell2) || cell2 == cell1); 

        clearCell(playingBoard, cell2, board[cell2]); 
        displayBoard(playingBoard); 

        if (board[cell1] == board[cell2]){
            System.out.println("You have found a pair");
        } else {
            System.out.println("You uncovered: " + board[cell2]); 
            clearCell(playingBoard, cell1, -1); 
            clearCell(playingBoard, cell2, -1); 
        }

        if (isBoardCleared(playingBoard)){
            
            return 3;
        }
        return 0; 
    }

    /**
     * Checks if a selected cell is within the bounds of the board
     * 
     * @param boardLength
     * @param cell
     * @return true if the index of the cell is within the bounds of the board
     */
    private static boolean isWithinBounds(int boardLength, int cell) {
        return cell >= 0 && cell < boardLength;
        
    }

    /**
     * This method will ask the user for the size of the board, check that the size
     * is even and request the method "place pairs" to randomly place pairs of numbers
     * 
     * @return An integer array representing a 1D board
     */
    private static int[] setupBoard() {
        Scanner keyboardScanner = new Scanner(System.in); 

        System.out.println("Welcome to the number matching game where you have to pick two cells in hopes of matching it with its pair!");
        System.out.println("Pick an even number for the size of the board");
        int size = keyboardScanner.nextInt();

        //int type array named board 
        int[] key = new int [1];  

        //while size is not a even number OR size is less than or equal to 2, prompt user to enter another number 
        while(size % 2 != 0 || size <= 2){ 
            System.out.println("Error, please enter an even number greater than 2 for the size of the board");
            size = keyboardScanner.nextInt(); 
            }
                key = new int[size];  
                placePairs(key); 
                return key;
    }

    /**
     * This method will display the main menu
     * @param attempts
     */
    private static void displayMainMenu(int attempts) {

        System.out.println("Do you wish to play for: ");
        System.out.println("1. " + attempts + " attempts");
        System.out.println("2. Unlimited number of attempts");
        System.out.println("3. Exit");

    }

    /**
     * 
     * This method will display the board. Question marks are pairs to be found
     *   0   1   2   3   4   5
     * _________________________
     * | 2 | 3 | ? | 2 | 3 | ? |
     * 
     * @param board The board to be shown. Question marks are pairs to be found
     * @return nothing
     */
    private static void displayBoard(int[] board) {
        //prints out the indices of the array 
        for(int i = 0; i < board.length; i++){
            System.out.print(i);
            System.out.print(' ');
            System.out.print(' ');
        }

        //prints out certain lengths of boarder based on size of the board 
        System.out.println(' ');
        if (board.length == 10){
           System.out.println("------------------------------");
        } else if (board.length == 8) {
           System.out.println("----------------------");
        } else if (board.length == 6){
           System.out.println("----------------");
        }else if (board.length == 4){
           System.out.println("----------");
        }else {
           System.out.println("--------------------------------------------------");
        }

        //prints out new playingBoard that displays question marks 
        for (int i = 0; i < board.length; i++){
            if(board[i] == -1) System.out.print('?');
            else System.out.print(board[i]);
            System.out.print(' ');
            System.out.print(' ');
        }
        System.out.println();
    }

    /**
     * This method will return true if the cell to be selected has already been
     * cleared
     * @param board
     * @param cell
     * @return
     */
    private static boolean isCellSelected(int[] board, int cell) { 
        return board[cell] != -1;
    }

    /**
     * This method will set a value into a specific cell
     * @param board
     * @param cell
     * @param value
     */
    private static void clearCell(int[] board, int cell, int value) {
        board[cell] = value; 
    }

    /**
     * This method will return true if the board has been cleared thus the end
     * of the game. False otherwise.
     * @param board
     * @return
     */
    private static boolean isBoardCleared(int[] board) {
        for(int i = 0; i < board.length; i++){
            if(board[i] == -1){
                return false; 
            }
        } 
        return true; 
    }

    /**
     * This method will randomly place pairs of numbers. It is guaranteed that the pairs of numbers will be greater than zero
     * DO NOT MODIFY
     * @param board
     */
    private static void placePairs(int[] board) {

        Random rand = new Random();

        // place the values in the array in order

        for (int i = 0; i < board.length; i++)
            board[i] = i / 2 + 1;
        // perfect array shuffle
        // swap the ith value with a random value from index i to end of array
        for (int i = 0; i < board.length - 1; i++) {
            int j = rand.nextInt(board.length - i);
            int temp = board[i];
            board[i] = board[j];
            board[j] = temp;
        }

    }
}
